// Componente para barra de progresso circular
const CircularProgress = ({ progress, label, color }) => {
    const circumference = 100 * Math.PI; // Circunferência do círculo
    const offset = circumference - (progress / 100) * circumference;

    return (
        <div className="flex flex-col items-center bg-cover pl-14 ">
            <svg className="w-32 h-32" viewBox="1 -2 120 128">
                <circle
                    cx="60" // Centralizando o círculo com o novo viewBox
                    cy="60"
                    r="54" // Ajustando o raio para se manter proporcional ao novo viewBox
                    fill="none"
                    stroke="#e0e0e0" // Cor do círculo de fundo
                    strokeWidth="15" // Largura do círculo de fundo
                />
                <circle
                    cx="60" // Centralizando o círculo de progresso
                    cy="60"
                    r="54"
                    fill="none"
                    strokeWidth="15" // Largura do círculo de progresso
                    strokeDasharray={circumference}
                    strokeDashoffset={offset}
                    stroke={color} // Usando a cor passada como prop    
                    transform="rotate(-90 60 60)" // Centralizando a rotação com o novo viewBox
                />
                <text
                    x="60" // Centralizando o texto
                    y="65"
                    textAnchor="middle"
                    fontSize="24" // Ajuste opcional do tamanho da fonte
                    fill="#333"
                >
                    {`${progress}%`}
                </text>
            </svg>
            <span className="text-center mt-2">{label}</span>
        </div>
    );
};

// Componente para o modal de upload
const UploadModal = ({ isOpen, onClose, onUpload }) => {
    const [selectedImage, setSelectedImage] = useState(null);
    const [title, setTitle] = useState("");
    const [description, setDescription] = useState("");

    const handleImageChange = (e) => {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onloadend = () => {
                setSelectedImage(reader.result);
            };
            reader.readAsDataURL(file);
        }
    };

    const handleUpload = () => {
        if (selectedImage && title && description) {
            onUpload({ url: selectedImage, title, description });
            setSelectedImage(null);
            setTitle("");
            setDescription("");
            onClose();
        }
    };


    const progressData = [
        { label: "Se sentiu nervosa", progress: 75, color: "#FF6347" }, // Vermelho
        { label: "Se sentiu ansiosa", progress: 50, color: "#00FF00" }, // Verde
        { label: "Sentiu medo", progress: 25, color: "#0000FF" },       // Azul
        { label: "Se sentiu feliz", progress: 100, color: "#FFFF00" },   // Amarelo
        { label: "Se sentiu animada", progress: 100, color: "#FF00FF" }  // Magenta
    ];